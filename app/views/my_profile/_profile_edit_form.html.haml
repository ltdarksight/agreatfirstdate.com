#event_items_popup
= simple_form_for profile, :url => update_profile_path, html: {class: 'form-horizontal', id: 'edit_profile'} do |f|
  .row.profile_edit
    .span6
      %h3 My Settings
      = f.fields_for :user do |f|
        = f.input :email, :input_html =>{:class => "input-large"}
      = f.input :gender, collection: Profile::GENDERS.map{|g, title|[title.humanize, g]}, prompt: true
      = f.input :looking_for, collection: Profile::GENDERS.map{|g, title|[title.humanize.pluralize, g]}, prompt: true
      = f.input :in_or_around, collection: Profile::LOCATIONS, include_blank: false
      = f.input :looking_for_age do
        .age-controls
          = f.label :looking_for_age_from
          = f.text_field :looking_for_age_from, :class => 'span1'
          = f.label :looking_for_age_to
          = f.text_field :looking_for_age_to, :class => 'span1'
      = f.input :birthday,
        :start_year => Date.today.year - 80,
        :end_year => Date.today.year - 16,
        :include_blank => true,
        :order => [:month, :day, :year]
      = f.input :first_name, :input_html =>{:class => "input-large"}
      = f.input :last_name, :input_html =>{:class => "input-large"}


      .span6

    .span6
      %h3 Change Password
      = f.fields_for :user do |f|
        = f.input :current_password, as: :password, required: false
        = f.input :password, as: :password, required: false
        = f.input :password_confirmation, as: :password, required: false


      %h3 Cancel My Account
      = f.input :canceled, :as => :boolean, label: false, inline_label: true, wrapper_html: {class: 'cancel-account'}

      %h3 Change Pillars
      .control-group
        %p You can only change pillars once a month for free. After once a month it costs you 300 points.
        = link_to "Change Pillars", "#pillars/choose"

      %h3 Billing Info
      = f.input :address1, input_html: {class: 'input-xxlarge', rows: 4}, as: :text, label: 'Address'
      = f.input :zip do
        = f.text_field :zip, :class => 'input-small'
        %span.hidden.send_geo= image_tag "/assets/verifying.gif"
      .control-group{:style => "width:750px;"}
        .controls-row
          = f.label :card_number, :style => "width:171px;"
          = f.text_field :card_number, class: "span3", value: f.object.card_number_masked, autocomplete: :off, style: 'width:243px;'
          = f.label :card_expiration, :style => "width:80px; margin-left:68px;"
          = f.text_field :card_expiration, class: "span2", autocomplete: :off

      .control-group{:style => "width:750px;"}
        .controls-row
          = f.label :card_type, :style => "width:171px;"
          = f.select :card_type, Profile::CARD_TYPES, {}, class: 'span2', autocomplete: :off, style: 'height: 28px'
          = f.label :card_cvc, :style => "width:80px; margin-left:68px;"
          = f.text_field :card_cvc, class: "span2", value: f.object.card_cvc_masked, autocomplete: :off

      .control-group
        .controls
          %p.help-block
            Your credit card will be automatically charged each month
            = link_to 'Change Card Details', '#', class: 'change-card_ hidden'
            = link_to 'Verify', '#', class: 'verify_ hidden'
          %span.hidden.verifying_
            Verifying
            = image_tag "verifying.gif"

  .row
    #form-progress.span12{:style => "display:none;"}
    #actions.span12
      = f.button :submit, 'Save'
      = link_to 'Cancel', my_profile_path

#event_items_popup.modal.hide.fade
#show_event_items_popup.modal.hide.fade
#profile_popup.modal.hide.fade
#choose_pillars_popup.modal.hide.fade
#facebook_albums_popup.modal.hide.fade

- content_for :javascript do
  $(function() {
  - if @profile == current_user.profile
    profile =  #{ raw(@profile.to_json(scope: :self)) }
  - else
    profile =  #{ raw(@profile.to_json(scope: :profile)) }

  userSetting = new Agreatfirstdate.Views.User.Settings({el: $("#edit_profile")})

  pillarsRouter = new Agreatfirstdate.Routers.PillarsRouter({profile: profile, pillars: #{ raw(@pillars.to_json scope: :self) }, pillarCategories: #{ raw(@pillar_categories.to_json(scope: :self)) }});
  })
